# -*- coding: utf-8 -*-

from __future__ import unicode_literals
from __future__ import absolute_import
import sys
import itertools
from utils import validate_coordinates, trim_shape, rotate_shape, convert_to_shape
# from bruteforce import generate_coordinates
from bypath import generate_coordinates


class Polyominoes(object):
    """
    How I approached the problem:
        1: hand draw the shapes to see how shapes can be generated by set of rules
        2. how to store the shapes
        3. how to generate the shapes
        4. how to determine valid shapes, eg. shapes without disconnected dots
        5. how to determine if shapes are duplicated, eg. by rotating it
    Data Structure
        1. Given time constraint, I have chosen multi-dimensional list as data structure to hold the shapes
        2. Each dimension is equal to the number of ominoes, a square.
    Generate Shapes
        1. How to generate all possible shapes, using itertools.combinations to give all possition coordinates
        2. How to avoid dots that are disconnected, group the dots by adjacent points, then gradualy merge the groups by intersections
    Things can be optimized or improved
        - a Shape class to further abstract the code
        - possible better data structure
        - algorithm to work out different shapes
        - working out if shapes are repeated
    """

    number = None  # the number of ominoes
    shapes = None  # valid shapes are added here

    def generate_coordinates(self):
        """
        Generator to generate variant shapes based on all combinations
        """

        self.bruteforce_count = 0
        tuples = []
        for x in range(self.number):
            for y in range(self.number):
                tuples.append((x, y))

        # combination, not permutation, because points are the same
        # eg. (0,0) and (0,1) is the same as (0,1) and (0,0) represented in diagram
        for coordinates in itertools.combinations(tuples, self.number):
            self.bruteforce_count += 1
            sys.stdout.write('Examining pattern {}\r'.format(self.bruteforce_count))
            sys.stdout.flush()
            yield coordinates
            # shape = [[1 if (x, y) in coordinates else 0 for y in range(self.number)] for x in range(self.number)]
            # yield shape

    def is_known_shape(self, shape):
        """
        see if shape already known
        """
        for i in range(4):
            if shape in self.shapes:
                return True
            shape = rotate_shape(shape)

        return False

    def run(self, number_of_ominoes):
        self.number = number_of_ominoes
        self.shapes = []
        combination_count = 0

        for coordinates in generate_coordinates(self.number):
            combination_count += 1
            sys.stdout.write('Examining pattern {}\r'.format(combination_count))
            sys.stdout.flush()
            # if it's a valid shape and not already known
            # then add to it
            if validate_coordinates(coordinates):
                shape = convert_to_shape(coordinates)
                shape = trim_shape(shape)
                if not self.is_known_shape(shape):
                    self.shapes.append(shape)

        for _shape in self.shapes:
            for line in _shape:
                print line
            print '-----------------'

        print('{} Ominoes'.format(self.number))
        print('There are {} combinations'.format(combination_count))
        print('There are {} shapes'.format(len(self.shapes)))
        return len(self.shapes)
